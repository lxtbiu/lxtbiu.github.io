<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤独患者</title>
  
  <subtitle>成為一個厲害的普通人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-22T09:01:11.147Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Liu JT</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础语法</title>
    <link href="http://yoursite.com/2020/01/22/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/01/22/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-01-22T06:47:01.000Z</published>
    <updated>2020-01-22T09:01:11.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在复习Java基础，刚刚好也做下笔记，本文介绍什么是Java，Java语言的开发环境，基本的数据类型有哪些，介绍了方法的概述，定义，与调用方法的三种形式，还有三种循环，数组等，再接再厉不服努力加油！！！</p>   <a id="more"></a><h2 id="1-1计算机基础知识"><a href="#1-1计算机基础知识" class="headerlink" title="1.1计算机基础知识"></a>1.1计算机基础知识</h2><p>​        <strong>字节</strong>： 字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性， 我们可以查看文件的字节大小。 </p><p> 8 bit = 1 B ，1024 B =1 KB ，1024 KB =1 MB ，1024 MB =1 GB ，1024 GB = 1 TB </p><p>​        <strong>常用DOS命令</strong>：</p><table><thead><tr><th>命令</th><th>操作符号</th></tr></thead><tbody><tr><td>盘符切换命令</td><td>D：</td></tr><tr><td>查看当前文件夹</td><td>dir</td></tr><tr><td>进入文件夹命令</td><td>cd 文件夹名</td></tr><tr><td>退出文件夹命令</td><td>cd..</td></tr><tr><td>退出磁盘根目录</td><td>cd\</td></tr><tr><td>清屏</td><td>cls</td></tr></tbody></table><h1 id="第二章Java语言开发环境"><a href="#第二章Java语言开发环境" class="headerlink" title="第二章Java语言开发环境"></a>第二章Java语言开发环境</h1><h2 id="2-1-Java虚拟机–JVM"><a href="#2-1-Java虚拟机–JVM" class="headerlink" title="2.1  Java虚拟机–JVM"></a>2.1  Java虚拟机–JVM</h2><p>​        <strong>JVM</strong>： ：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的 运行环境，是Java 最具吸引力的特性之一。我们编写的Java代码，都运行在 JVM 之上。 </p><h2 id="2-2-JRE和JDK"><a href="#2-2-JRE和JDK" class="headerlink" title="2.2 JRE和JDK"></a>2.2 JRE和JDK</h2><pre><code>**· JRE**： 是Java程序的运行时环境，包含 JVM 和运行时所需要的 核心类库 。 </code></pre><p>​    <strong>· JDK</strong>：  是Java程序开发工具包，包含 JRE 和开发人员使用的工具。 </p><p>​    三者关系： JDK&gt;JRE&gt;JVM</p><h1 id="第三章程序说明"><a href="#第三章程序说明" class="headerlink" title="第三章程序说明"></a>第三章程序说明</h1><h2 id="3-1编译和运行是两回事"><a href="#3-1编译和运行是两回事" class="headerlink" title="3.1编译和运行是两回事"></a>3.1编译和运行是两回事</h2><p>​            <strong>·  编译：</strong>是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中， javac 编译器会检查我们 所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。 </p><p>​            <strong>·运行</strong>：是指将 class文件 交给JVM去运行，此时JVM就会去执行我们编写的程序了。</p><h2 id="3-2关于main方法"><a href="#3-2关于main方法" class="headerlink" title="3.2关于main方法"></a>3.2关于main方法</h2><p>​         <strong>main方法</strong>：称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们编写多 少程序，JVM在运行的时候，都会从main方法这里开始执行。</p><h2 id="3-3关键字keywords"><a href="#3-3关键字keywords" class="headerlink" title="3.3关键字keywords"></a>3.3关键字keywords</h2><p>​         <strong>关键字</strong>：是指在程序中，Java已经定义好的单词，具有特殊含义。 HelloWorld案例中，出现的关键字有 public 、 class 、 static 、 void 等，这些单词已经被 Java定义好，全部都是小写字母，notepad++中颜色特殊。   </p><h2 id="3-4-标识符"><a href="#3-4-标识符" class="headerlink" title="3.4 标识符"></a>3.4 标识符</h2><p> <strong>标识符：</strong>是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。 </p><p> <strong>命名规则：</strong> <strong>硬性要求</strong> </p><p>标识符可以包含 英文字母26个(区分大小写) 、 0-9数字 、 $（美元符号） 和 _（下划线） 。 标识符不能以数字开头。 标识符不能是关键字 </p><p> <strong>命名规范： 软性建议</strong> </p><p>类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。 方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）。 变量名规范：全部小写。 </p><h1 id="第四章变量和数据类型"><a href="#第四章变量和数据类型" class="headerlink" title="第四章变量和数据类型"></a>第四章变量和数据类型</h1><h2 id="5-1数据类型"><a href="#5-1数据类型" class="headerlink" title="5.1数据类型"></a>5.1数据类型</h2><h3 id="Java的数据类型分为两大类"><a href="#Java的数据类型分为两大类" class="headerlink" title="Java的数据类型分为两大类"></a>Java的数据类型分为两大类</h3><p>​    <strong>基本数据类型：</strong>包括 整数、浮点数、字符、布尔。</p><p>​    <strong>引用数据类型：</strong>包括 类、数组、接口。</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="四类八种基本数据类型"><a href="#四类八种基本数据类型" class="headerlink" title="四类八种基本数据类型"></a>四类八种基本数据类型</h4><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>-128~127</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>-32768~32767</td></tr><tr><td>整型</td><td>int</td><td>4个字节</td><td>-231次方~2的31次方-1</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-2的63次方~2的63次方-1</td></tr><tr><td>单精度浮点数</td><td>folat</td><td>4个字节</td><td>1.4013E-45~3.4028E+38</td></tr><tr><td>双精度浮点数</td><td>double</td><td>8个字节</td><td>4.9E-324~1.7977E+308</td></tr><tr><td>字节型</td><td>char</td><td>2个字节</td><td>0-65535</td></tr><tr><td>布尔型</td><td>boolean</td><td>1个字节</td><td>true，false</td></tr></tbody></table><p>Java中的默认类型： 整数类型是int，浮点类型是double</p><h2 id="5-2变量的定义"><a href="#5-2变量的定义" class="headerlink" title="5.2变量的定义"></a>5.2变量的定义</h2><p> <strong>变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量。</strong> </p><p>变量定义的格式包括三个要素： 数据类型、变量名、数据值。</p><p><strong>格式</strong>： <strong>数据类型 变量名 = 数据值；</strong></p><h2 id="5-3注意事项"><a href="#5-3注意事项" class="headerlink" title="5.3注意事项"></a>5.3注意事项</h2><p><strong>变量名称：在同一个大括号范围内，变量的名字不可以相同</strong></p><p><strong>变量赋值：定义是变量，不赋值不能使用。</strong></p><h1 id="第五章-方法"><a href="#第五章-方法" class="headerlink" title="第五章 方法"></a>第五章 方法</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p> 我们在学习运算符的时候，都为每个运算符单独的创建一个新的类和main方法，我们会发现这样编写代码非常的繁琐，而且 重复的代码过多。能否避免这些重复的代码呢，就需要使用方法来实现。</p><p>​         <strong>方法：</strong>就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。 当我们需要这个功能的时候，就可以去调用。这样即实现了代码的复用性，也解决了代码冗余的现象。 </p><h2 id="5-2方法的定义"><a href="#5-2方法的定义" class="headerlink" title="5.2方法的定义"></a>5.2方法的定义</h2><p> <strong>定义格式：</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 （参数列表）｛</span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><ul><li>修饰符：public static</li><li>返回值类型：表示方法运行的结果的数据类型，方法执行后将结果返回到调用者</li><li>参数列表：方法在运行过程中未知数据，调用者调用方法时传递</li><li>return：将方法执行后的结果带给调用者，方法执行到return，整体方法运行结束</li></ul><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这是一个方法"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3方法的调用"><a href="#5-3方法的调用" class="headerlink" title="5.3方法的调用"></a>5.3方法的调用</h2><p>​     <strong>方法在定义完毕后，方法不会自己运行，必须被调用才能执行，我们可以在主方法main中来调用我们自己定义好的方法。在 主方法中，直接写要调用的方法名字就可以调用了</strong>。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用定义的方法method</span></span><br><span class="line">    method();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方法，被main方法调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"自己定义的方法，需要被main调用运行"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4调用方法的三种形式"><a href="#5-4调用方法的三种形式" class="headerlink" title="5.4调用方法的三种形式"></a>5.4调用方法的三种形式</h2><ul><li><p><strong>直接调用：</strong>直接写方法名调用</p></li><li><pre><code class="Java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{    print();}<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>{    System.out.println(<span class="string">"方法被调用"</span>);}&lt;!--￼<span class="number">3</span>--&gt;</code></pre></li><li><p><strong>输出语句调用：</strong> 在输出语句中调用方法， System.out.println(方法名()) 。 </p></li></ul><h2 id="5-5方法重载"><a href="#5-5方法重载" class="headerlink" title="5.5方法重载"></a>5.5方法重载</h2><ul><li><p><strong>方法重载：</strong> 指在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可，与修饰符和返 回值类型无关。  </p></li><li><p>参数列表：个数不同，数据类型不同，顺序不同。 </p></li><li><p>重载方法调用：JVM通过方法的参数列表，调用不同的方法。 </p></li><li><p>如：</p></li><li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>{}<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a)</span></span>{}<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a，<span class="keyword">int</span> b)</span></span>{}&lt;!--￼<span class="number">4</span>--&gt;</code></pre></li></ul><h2 id="6-2循环语句–while"><a href="#6-2循环语句–while" class="headerlink" title="6.2循环语句–while"></a>6.2循环语句–while</h2><p> <strong>while循环语句格式：</strong>  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化表达式①</span><br><span class="line"><span class="function"><span class="title">while</span><span class="params">(布尔表达式②)</span></span>&#123;</span><br><span class="line">循环体③</span><br><span class="line">步进表达式④</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3循环语句–do…while"><a href="#6-3循环语句–do…while" class="headerlink" title="6.3循环语句–do…while"></a>6.3循环语句–do…while</h2><p> <strong>do…while循环格式</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化表达式①</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环体③</span><br><span class="line">步进表达式④</span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式②);</span><br></pre></td></tr></table></figure><h2 id="6-4循环语句的区别"><a href="#6-4循环语句的区别" class="headerlink" title="6.4循环语句的区别"></a>6.4循环语句的区别</h2><p> <strong>for 和 while 的小区别：</strong> </p><p>​        控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继 续使用，如果你想继续使用，就用while，否则推荐使用for。原因是for循环结束，该变量就从内存中消 失，能够提高内存的使用效率。</p><p>​         在已知循环次数的时候使用推荐使用for，循环次数未知的时推荐使用while。 </p><h2 id="6-5跳出语句"><a href="#6-5跳出语句" class="headerlink" title="6.5跳出语句"></a>6.5跳出语句</h2><p><strong>break</strong></p><p>​    <strong>使用场景：终止switch或者循环</strong></p><p>​                 在选择结构switch语句中 </p><p>​                 在循环语句中 </p><p>​                 离开使用场景的存在是没有意义的 </p><p><strong>continue</strong></p><p>​        <strong>使用场景：结束本次循环，继续下一次的循环</strong></p><h1 id="第7章数组"><a href="#第7章数组" class="headerlink" title="第7章数组"></a>第7章数组</h1><h2 id="7-1数组定义和访问"><a href="#7-1数组定义和访问" class="headerlink" title="7.1数组定义和访问"></a>7.1数组定义和访问</h2><h3 id="7-1-1容器概述"><a href="#7-1-1容器概述" class="headerlink" title="7.1.1容器概述"></a>7.1.1容器概述</h3><p><strong>容器概念</strong>：</p><p>​        <strong>容器：</strong>是将多个数据储存到一起，每个数据称为该容器的元素。</p><h3 id="7-1-2数组的概念"><a href="#7-1-2数组的概念" class="headerlink" title="7.1.2数组的概念"></a>7.1.2数组的概念</h3><p> <strong>数组概念：</strong> 数组就是存储数据长度固定的容器，保证多个数据的数据类型要一致。</p><h3 id="7-1-3数组的定义"><a href="#7-1-3数组的定义" class="headerlink" title="7.1.3数组的定义"></a>7.1.3数组的定义</h3><p><strong>方式一</strong></p><p>​        <strong>格式：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组存储的数据类型[] 数组名字 = <span class="keyword">new</span> 数组存储的数据类型[长度];</span><br></pre></td></tr></table></figure><ul><li><strong>数组定义格式详解：</strong><ul><li>数组存储的数据类型：创建的数组可以储存什么数据类型。</li><li>[]：表示数组</li><li>数组名字：为定义的数据起一个变量名，满足标识符规范，可以使用名字操作数组</li><li>new：关键字，创建数组的关键字</li><li>数组存储的数据类型： 创建的数组容器可以存储什么数据类型。 </li><li>[长度]：数组的长度，表示数组容器中可以存储多少个元素。 </li><li><strong>注意：数组有定长特性，长度一旦指定，不可更改。</strong> </li></ul></li></ul><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p><strong>方式二</strong></p><p>​        <strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>...&#125;;</span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> intp[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>方式三</strong></p><p>​        <strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>...&#125;;</span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-1-4-数组的访问"><a href="#7-1-4-数组的访问" class="headerlink" title="7.1.4 数组的访问"></a>7.1.4 数组的访问</h3><ul><li><p><strong>索引：</strong> 每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为<strong>数组索引 (index)</strong>，可以通过数组的索引访问到数组中的元素。 </p></li><li><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引]</span><br></pre></td></tr></table></figure></li><li><p><strong>数组的长度：</strong> 每个数组都具有长度，而且是固定的，Java中赋予了数组的一个属性，可以获取到数组的 长度，语句为： <strong>数组名.length</strong> </p></li></ul><h2 id="7-2数组原理内存"><a href="#7-2数组原理内存" class="headerlink" title="7.2数组原理内存"></a>7.2数组原理内存</h2><h3 id="7-2-1内存概述"><a href="#7-2-1内存概述" class="headerlink" title="7.2.1内存概述"></a>7.2.1内存概述</h3><p>​         内存是计算机中的重要原件，临时存储区域，作用是运行程序。我们编写的程序是存放在硬盘中的，在硬盘中的程 序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。 Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。 </p><h3 id="7-2-2Java虚拟机的内存划分"><a href="#7-2-2Java虚拟机的内存划分" class="headerlink" title="7.2.2Java虚拟机的内存划分"></a>7.2.2Java虚拟机的内存划分</h3><p>​         为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。 </p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>寄存器</td><td>给CPU使用，和我们开发无关。</td></tr><tr><td>本地方法栈</td><td>JVM在使用操作系统功能的时候使用，和我们开发无关</td></tr><tr><td>方法区</td><td>存储可以运行的class文件。</td></tr><tr><td>堆内存</td><td>存储对象或者数组，new来创建的，都存储在堆内存。</td></tr><tr><td>方法栈</td><td>方法运行时使用的内存，比如main方法运行。</td></tr></tbody></table><h3 id="7-2-3数组的常见操作"><a href="#7-2-3数组的常见操作" class="headerlink" title="7.2.3数组的常见操作"></a>7.2.3数组的常见操作</h3><ul><li><strong>数据越界异常</strong></li><li><strong>数组空指针异常</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在复习Java基础，刚刚好也做下笔记，本文介绍什么是Java，Java语言的开发环境，基本的数据类型有哪些，介绍了方法的概述，定义，与调用方法的三种形式，还有三种循环，数组等，再接再厉不服努力加油！！！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础（一）" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>新的一年新的开始！</title>
    <link href="http://yoursite.com/2020/01/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2020/01/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2020-01-20T10:46:45.000Z</published>
    <updated>2020-01-21T09:40:49.714Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新的一年就要来啦！！请你一定不要停下来成为你想成为的人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;新的一年就要来啦！！请你一定不要停下来成为你想成为的人。&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
