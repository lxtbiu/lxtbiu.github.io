<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础（二）</title>
      <link href="/2020/01/26/Java%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/01/26/Java%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在复习的Java基础的过程中采用写博客的方法，更有助于记忆的吸收，本篇博客总结了面向对象的思想，封装，还有常用API中Scanner类，Random类，ArrayList类，String类等，继续加油吧少年！</p>   <a id="more"></a><h1 id="第1章-面向对象思想"><a href="#第1章-面向对象思想" class="headerlink" title="第1章 面向对象思想"></a>第1章 面向对象思想</h1><h2 id="1-1面向对象思想的概述"><a href="#1-1面向对象思想的概述" class="headerlink" title="1.1面向对象思想的概述"></a>1.1面向对象思想的概述</h2><p><strong>概述</strong></p><p>​        Java语言是一种面向对象的程序设计语言，而面向对象思想是一种程序设计思想，我们在面向对象思想的指引下，使用Java语言去设计，开发计算机程序。这里的对象泛指现实中一切的事物，每种事物都具备自己的属性和行为。它区别于面向过程思想，强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去操作实现。</p><p><strong>区别</strong></p><ul><li>面向过程：强调步骤</li><li>面向对象： 强调对象</li></ul><p><strong>特点</strong></p><p>​        面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成指挥者。面向对象的语言中，包含三大基本特征，即封装、继承、多态。</p><h2 id="1-2-类和对象"><a href="#1-2-类和对象" class="headerlink" title="1.2 类和对象"></a>1.2 类和对象</h2><p><strong>什么是类</strong></p><ul><li><strong>类：</strong>    是一组相关属性和行为的集合。</li><li><strong>属性：</strong>就是该事物的状态信息</li><li><strong>行为：</strong> 就是该事物能做什么</li></ul><p><strong>什么是对象</strong></p><ul><li><strong>对象：</strong>是一类事物的具体表现。对象是类的一个实例，必然具备该类事物的属性和行为。</li></ul><p><strong>类与对象的关系</strong></p><ul><li>类是对一类事物的描述，是抽象的。</li><li>对象是对一类事物的实例，是具体的。</li><li>类是对象的模板，对象是类的实体。</li></ul><h2 id="1-3类的定义"><a href="#1-3类的定义" class="headerlink" title="1.3类的定义"></a>1.3类的定义</h2><p><strong>类的定义格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>定义类：</strong> 就是定义类的成员，包括成员变量和成员方法。</li><li><strong>成员变量：</strong> 在类中，方法外。</li><li><strong>成员方法：</strong> 和以前定义方法是一样的</li></ul><h2 id="1-4-对象的使用"><a href="#1-4-对象的使用" class="headerlink" title="1.4 对象的使用"></a>1.4 对象的使用</h2><p><strong>对象的使用格式</strong></p><p>创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名 = <span class="keyword">new</span> 类名（）；</span><br></pre></td></tr></table></figure><p>使用对象访问类中的成员：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象名.成员变量;</span><br><span class="line">对象名.成员方法();</span><br></pre></td></tr></table></figure><h2 id="1-5成员变量和局部变量区别"><a href="#1-5成员变量和局部变量区别" class="headerlink" title="1.5成员变量和局部变量区别"></a>1.5成员变量和局部变量区别</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">String name;<span class="comment">//成员变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> age;<span class="comment">//局部变量</span></span><br><span class="line">        System.out.println(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在类中的位置不同</p><ul><li>成员变量：类中，方法外。</li><li>局部变量：方法中。</li></ul></li><li><p>作用的范围不一样</p><ul><li>成员变量：类中</li><li>局部变量：方法中</li></ul></li><li><p>初始化默认值</p><ul><li>成员变量：有默认值</li><li>局部变量：没有默认值。必须先定义后赋值，在使用。</li></ul></li><li><p>在内存中的位置不同</p><ul><li>成员变量：堆内存</li><li>局部变量：栈内存</li></ul></li><li><p>生命周期不同</p><ul><li>成员变量：随着对象的创建而存在，随着对象的消失而消失</li><li>局部变量：随着方法的调用而存在，随着调用的方法完毕而消失</li></ul></li></ul><h1 id="第2章-封装"><a href="#第2章-封装" class="headerlink" title="第2章 封装"></a>第2章 封装</h1><h2 id="2-1-封装概述"><a href="#2-1-封装概述" class="headerlink" title="2.1 封装概述"></a>2.1 封装概述</h2><p><strong>概述</strong></p><p>​        封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。要访问该类的数据，必须通过指定的方式。适当的封装可以让代码更容易理解与维护，也加强了代码的安全性。</p><p><strong>原则</strong></p><p>​        将属性隐藏起来，若需要访问某个属性，提供公共方法对其访问</p><h2 id="2-2-封装的步骤"><a href="#2-2-封装的步骤" class="headerlink" title="2.2 封装的步骤"></a>2.2 封装的步骤</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.使用 <span class="keyword">private</span> 关键字来修饰成员变量</span><br><span class="line"><span class="number">2</span>.对需要访问的成员变量，提供对应的get和set方法。</span><br></pre></td></tr></table></figure><h2 id="2-3-封装的操作—-private关键字"><a href="#2-3-封装的操作—-private关键字" class="headerlink" title="2.3 封装的操作—-private关键字"></a>2.3 封装的操作—-private关键字</h2><p><strong>private的含义</strong></p><ol><li>private是一个权限修饰符，代表最小权限</li><li>可以修饰成员变量和成员方法。</li><li>被private修饰后的成员变量和成员方法，只能在本类中使用</li></ol><p><strong>private的使用格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> 数据类型 变量名;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> ing age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-封装优化1—-this关键字"><a href="#2-4-封装优化1—-this关键字" class="headerlink" title="2.4 封装优化1—-this关键字"></a>2.4 封装优化1—-this关键字</h2><p><strong>this的含义</strong></p><p>this代表所在类的当前对象的引用（地址值），即对象自己的引用</p><p>记住：方法被哪个对象调用，this就代表哪个对象，即谁在调用，this就代表谁</p><p><strong>this使用格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.成员变量名</span><br></pre></td></tr></table></figure><h2 id="2-5-封装优化2—-构造方法"><a href="#2-5-封装优化2—-构造方法" class="headerlink" title="2.5 封装优化2—-构造方法"></a>2.5 封装优化2—-构造方法</h2><p>当一个对象被创建的时候，构建方法用来初始化该对象，给对象的成员变量赋值初始值</p><p><strong>构造方法的定义格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 构造方法名(参数列表)&#123;</span><br><span class="line">  <span class="comment">//方法名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name , <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li>如果你不提供构造方法，系统会给出无参数构造方法。</li><li>如果你提供了构造方法，系统将不在提供无参数的构造方法</li><li>构造方法可以重载，既可以定义参数，也可以不定义参数</li></ol><h2 id="2-6-标准代码—–JavaBean"><a href="#2-6-标准代码—–JavaBean" class="headerlink" title="2.6 标准代码—–JavaBean"></a>2.6 标准代码—–JavaBean</h2><p>JavaBean是Java语言编写类的一种标准规范。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="comment">//无参构造方法【必须】</span></span><br><span class="line"><span class="comment">//有参构造方法【建议】</span></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line"><span class="comment">//getXxx()</span></span><br><span class="line"><span class="comment">//setXxx()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第3章-Scanner类"><a href="#第3章-Scanner类" class="headerlink" title="第3章 Scanner类"></a>第3章 Scanner类</h1><h2 id="2-1-什么是Scanner类"><a href="#2-1-什么是Scanner类" class="headerlink" title="2.1 什么是Scanner类"></a>2.1 什么是Scanner类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in)</span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt();</span><br></pre></td></tr></table></figure><h2 id="2-2-引用类型使用步骤"><a href="#2-2-引用类型使用步骤" class="headerlink" title="2.2 引用类型使用步骤"></a>2.2 引用类型使用步骤</h2><p><strong>创建对象</strong></p><p>使用该类的构造方法，创建一个该类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = <span class="keyword">new</span> 数据类型(参数列表);</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><p><strong>调用方法</strong></p><p>调用该类的成员方法，完成指定功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名.方法名()</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br></pre></td></tr></table></figure><h2 id="2-3-匿名对象"><a href="#2-3-匿名对象" class="headerlink" title="2.3 匿名对象"></a>2.3 匿名对象</h2><p><strong>概念</strong></p><p> 创建对象时，只有创建对象的语句，却没有把对象地址值赋值给某个变量。</p><p>匿名对象：没有变量名的对象</p><p><strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名(参数列表);</span><br></pre></td></tr></table></figure><p><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><ol><li><p>创建匿名对象直接调用方法，没有变量名。</p></li><li><p>一旦调用两次方法，就是创建了两个对象，造成浪费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line"><span class="keyword">new</span> Scanner(System.in).nextInt();</span><br></pre></td></tr></table></figure><p>一个匿名对象，只能使用一次</p><p>3.匿名对象可以作为方法的参数和返回值</p></li></ol><h1 id="第3章-Random类"><a href="#第3章-Random类" class="headerlink" title="第3章 Random类"></a>第3章 Random类</h1><h2 id="3-1-什么是Random类"><a href="#3-1-什么是Random类" class="headerlink" title="3.1 什么是Random类"></a>3.1 什么是Random类</h2><p>此类的实例用于生成随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> i = r.nextInt();</span><br></pre></td></tr></table></figure><h2 id="3-2-Random使用步骤"><a href="#3-2-Random使用步骤" class="headerlink" title="3.2 Random使用步骤"></a>3.2 Random使用步骤</h2><p><strong>查看构造方法</strong></p><ul><li>public Random()：创建一个新的随机生成器</li></ul><p><strong>查看成员方法</strong></p><ul><li>public int nextInt(int n)：返回一个伪随机数，范围在0（包括）和 n（不包括）之间的int 值</li></ul><h1 id="第四章-ArrayList类"><a href="#第四章-ArrayList类" class="headerlink" title="第四章 ArrayList类"></a>第四章 ArrayList类</h1><h2 id="4-2-什么是ArrayList类"><a href="#4-2-什么是ArrayList类" class="headerlink" title="4.2 什么是ArrayList类"></a>4.2 什么是ArrayList类</h2><p>java.util.ArrayList是大小可变的数组实现，存储在内的数据称为元素，ArrayList中可不断添加元素，其大小也自动增长。</p><h2 id="4-3-ArrayList使用步骤"><a href="#4-3-ArrayList使用步骤" class="headerlink" title="4.3 ArrayList使用步骤"></a>4.3 ArrayList使用步骤</h2><p><strong>查看类</strong></p><p>java.util.ArrayList&lt; E &gt;: &lt; E &gt;表示一种泛型，使用一种引用数据类型将其替换即可</p><p><strong>查看构造方法</strong></p><p>public ArrayList()：构造一个内容为空的集合</p><p><strong>基本格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p><strong>查看成员方法</strong></p><p>public boolean add(E e)：将指定的元素添加到集合的尾部</p><p>在构造ArrayList对象时 &lt; E &gt;指定了什么数据类型，那么add（E e）方法中，只能添加什么类型的对象</p><h2 id="4-4-常用方法和遍历"><a href="#4-4-常用方法和遍历" class="headerlink" title="4.4 常用方法和遍历"></a>4.4 常用方法和遍历</h2><ul><li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span><span class="comment">//将指定元素添加到此集合的尾部</span></span><span class="function"><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  <span class="keyword">public</span> E remove(<span class="keyword">int</span> <span class="keyword">index</span>)<span class="comment">//移除此集合中指定位置上的元素。返回被删除的元素</span></span><br></pre></td></tr></table></figure></span></code></pre></li><li><pre><code class="java"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span><span class="comment">//返回此集合中指定位置上的元素。返回获取的元素</span></span><span class="function"><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">size</span>()<span class="comment">//返回此集合中的元素数</span></span><br></pre></td></tr></table></figure></span><span class="function"></span></code></pre></li></ul><h2 id="4-5-如何存储基本数据类型"><a href="#4-5-如何存储基本数据类型" class="headerlink" title="4.5 如何存储基本数据类型"></a>4.5 如何存储基本数据类型</h2><p> ArrayList对象不能存储基本类型，只能存储引用类型的数据。类似  不能写，但是存储基本数据类型对应的 包装类型是可以的。所以，想要存储基本类型数据， &lt;&gt; 中的数据类型，必须转换后才能编写，转换写法如下： </p><table><thead><tr><th>基本数据类型</th><th>基本类型包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h1 id="第五章-String类"><a href="#第五章-String类" class="headerlink" title="第五章 String类"></a>第五章 String类</h1><h2 id="1-1-String类概述"><a href="#1-1-String类概述" class="headerlink" title="1.1 String类概述"></a>1.1 String类概述</h2><p><strong>概述</strong></p><p>String类代表字符串。Java程序中所有的字符串文字（例如“abc”）都可以被看作是实现此类的实例。类String中包括用于检查各个字符串的方法。</p><p><strong>特点</strong></p><ol><li><p>字符串不变：字符串的值在创建后就不能被更改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String S1 = <span class="string">"abc"</span>;</span><br><span class="line">S1 += <span class="string">"d"</span>;</span><br><span class="line">System.out.println(S1);<span class="comment">//"abcd"</span></span><br><span class="line"><span class="comment">//内存中有"abc"和"abcd"两个对象，S1从指向"abc",改变指向"abcd"</span></span><br></pre></td></tr></table></figure></li><li><p>因为String对象是不可变的，所有它可以共享。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"abc"</span>;</span><br><span class="line">String b = <span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">//内存中有"abc"对象被创建，同时被a和b共享</span></span><br></pre></td></tr></table></figure></li><li><p>“abc” 等效于 char[] data = {‘a’,’b’,’c’}.</p></li></ol><h2 id="1-2-使用步骤"><a href="#1-2-使用步骤" class="headerlink" title="1.2 使用步骤"></a>1.2 使用步骤</h2><ul><li><strong>查看构造方法</strong><ul><li>public String()：初始化创建的String对象</li><li>public String(char[] value)：通过当前的字符串数组来构造新的String</li><li>public String(byte[] bytes)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过字符数组构造</span></span><br><span class="line"><span class="keyword">char</span> chars[] = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(chars);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过字节数组构造</span></span><br><span class="line"><span class="keyword">byte</span> bytes[] = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(bytes);</span><br></pre></td></tr></table></figure><h2 id="1-3-常用方法"><a href="#1-3-常用方法" class="headerlink" title="1.3 常用方法"></a>1.3 常用方法</h2><p><strong>判断功能的方法</strong></p><ul><li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span><span class="comment">//将此字符串与指定的对象进行比较</span></span><span class="function"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(<span class="keyword">String</span> anotherString)</span><span class="comment">//将此字符串与指定对象进行比较，忽略大小写</span></span></span><br></pre></td></tr></table></figure></span><span class="function"></span></code></pre></li></ul><p>–Object是对象的意思，也是一种引用类型。作为参数类型，表示任意对象都可以传递到方法 </p><p><strong>获取功能的方法</strong></p><ul><li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span><span class="comment">//返回此字符串的长度</span></span><span class="function"><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">concat</span>(<span class="keyword">String</span> <span class="built_in">str</span>)<span class="comment">//将指定的字符串连接到该字符串的结尾</span></span><br></pre></td></tr></table></figure></span></code></pre></li><li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span><span class="comment">//返回指定索引处的char值。</span></span><span class="function"><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> indexOf(<span class="keyword">String</span> <span class="built_in">str</span>)<span class="comment">//返回字符串第一次出现在该字符串的索引</span></span><br></pre></td></tr></table></figure></span></code></pre></li><li><pre><code class="java"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span> <span class="params">(<span class="keyword">int</span> beginIndex)</span><span class="comment">//返回一个子字符串，从beginIndex开始截取字符串到字符串结尾。</span></span><span class="function"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">substring</span> <span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> <span class="comment">//返回一个子字符串，从beginIndex到endIndex截取字符串。含beginIndex，不含endIndex。</span></span></span><br></pre></td></tr></table></figure></span><span class="function"></span></code></pre></li></ul><p><strong>转换功能的方法</strong></p><ul><li><pre><code class="java"><span class="keyword">public</span> <span class="keyword">char</span>[] toCharArray ()<span class="comment">//将此字符串转换为新的字符数组。</span>&lt;!--￼<span class="number">30</span>--&gt;</code></pre></li><li><pre><code class="java"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span> <span class="params">(CharSequence target, CharSequence replacement)</span><span class="comment">//将与target匹配的字符串使用replacement字符串替换。</span></span><span class="function"><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**分割功能的方法**</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">String</span>[] <span class="built_in">split</span>(<span class="keyword">String</span> regex)<span class="comment">//将此字符串按照给定的regex（规则）拆分为字符串数组。</span></span><br></pre></td></tr></table></figure></span><span class="function"></span></code></pre></li></ul><h1 id="第六章-static关键字"><a href="#第六章-static关键字" class="headerlink" title="第六章 static关键字"></a>第六章 static关键字</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a><strong>2.1 概述</strong></h2><p>​         static 关键字的使用，它可以用来修饰的成员变量和成员方法，被修饰的成员是属于类的，而不是单单是属 于某个对象的。也就是说，既然属于类，就可以不靠创建对象来调用了。 </p><h2 id="2-2-定义和使用格式"><a href="#2-2-定义和使用格式" class="headerlink" title="2.2 定义和使用格式"></a>2.2 定义和使用格式</h2><p><strong>类变量</strong></p><pre><code>当 static 修饰成员变量时，该变量称为类变量。该类的每个对象都共享同一个类变量的值。任何对象都可以更改 该类变量的值，但也可以在不创建该类的对象的情况下对类变量进行操作。 </code></pre><p>定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> 数据类型 变量名；</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> id；</span><br></pre></td></tr></table></figure><p><strong>静态方法</strong></p><pre><code>当 static 修饰成员方法时，该方法称为类方法 。静态方法在声明中有 static ，建议使用类名来调用，而不需要 创建类的对象。调用方式非常简单。 </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">static</span> 返回值类型 方法名 (参数列表)&#123;</span><br><span class="line"><span class="comment">// 执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"num:"</span> + num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态方法调用的注意事项： <ul><li>静态方法可以直接访问类变量和静态方法。 </li><li>静态方法不能直接访问普通成员变量或成员方法。反之，成员方法可以直接访问类变量或静态方法 </li><li>静态方法中，不能使用this关键字 </li></ul></li></ul><p>静态方法只能访问静态成员</p><p><strong>调用格式</strong></p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问类变量</span></span><br><span class="line">类名.类变量名；</span><br><span class="line"><span class="comment">// 调用静态方法</span></span><br><span class="line">类名.静态方法名(参数)；</span><br></pre></td></tr></table></figure><h2 id="2-3-static-修饰的内容："><a href="#2-3-static-修饰的内容：" class="headerlink" title="2.3 static 修饰的内容："></a>2.3 static 修饰的内容：</h2><ul><li>是随着类的加载而加载的，且只加载一次。 </li><li>存储于一块固定的内存区域（静态区），所以，可以直接被类名调用。 </li><li>它优先于对象存在，所以，可以被所有对象共享。  </li></ul><h2 id="2-4-静态代码块"><a href="#2-4-静态代码块" class="headerlink" title="2.4 静态代码块"></a>2.4 静态代码块</h2><ul><li>静态代码块：定义在成员位置，使用static修饰的代码块{ … }。 <ul><li>位置：类中方法外。 </li><li>执行：随着类的加载而执行且执行一次，优先于main方法和构造方法的执行。 </li></ul></li></ul><p><strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  <span class="comment">// 执行语句</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小提示：</p><p> static 关键字，可以修饰变量、方法和代码块。在使用的过程中，其主要目的还是想在不创建对象的情况 下，去调用方法。下面将介绍两个工具类，来体现static 方法的便利。  </p><h1 id="第七章-Arrays类"><a href="#第七章-Arrays类" class="headerlink" title="第七章 Arrays类"></a>第七章 Arrays类</h1><h2 id="7-1概述"><a href="#7-1概述" class="headerlink" title="7.1概述"></a>7.1概述</h2><p> Arrays 此类包含用来操作数组的各种方法，比如排序和搜索等。其所有方法均为静态方法。  </p><h2 id="7-2操作数组的方法"><a href="#7-2操作数组的方法" class="headerlink" title="7.2操作数组的方法"></a>7.2操作数组的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span>[] a)</span><span class="comment">//返回指定数组内容的字符串表示形式。</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span><span class="comment">//对指定的 int 型数组按数字升序进行排序。</span></span></span><br></pre></td></tr></table></figure><h1 id="第八章-Math类"><a href="#第八章-Math类" class="headerlink" title="第八章 Math类"></a>第八章 Math类</h1><h2 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h2><p> Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。类似这样的工具 类，其所有方法均为静态方法，并且不会创建对象，调用起来非常简单。  </p><h2 id="8-2基本运算方法"><a href="#8-2基本运算方法" class="headerlink" title="8.2基本运算方法"></a>8.2基本运算方法</h2><ul><li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">abs</span><span class="params">(<span class="keyword">double</span> a)</span><span class="comment">//返回 double 值的绝对值。</span></span><span class="function"><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="built_in">double</span> d1 = Math.abs(‐<span class="number">5</span>); <span class="comment">//d1的值为5</span></span><br><span class="line"><span class="built_in">double</span> d2 = Math.abs(<span class="number">5</span>); <span class="comment">//d2的值为5</span></span><br></pre></td></tr></table></figure></span></code></pre></li><li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> a)</span><span class="comment">//返回大于等于参数的最小的整数。</span></span><span class="function"><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="built_in">double</span> d1 = Math.ceil(<span class="number">3.3</span>); <span class="comment">//d1的值为 4.0</span></span><br><span class="line"><span class="built_in">double</span> d2 = Math.ceil(‐<span class="number">3.3</span>); <span class="comment">//d2的值为 ‐3.0</span></span><br><span class="line"><span class="built_in">double</span> d3 = Math.ceil(<span class="number">5.1</span>); <span class="comment">//d3的值为 6.0</span></span><br></pre></td></tr></table></figure></span></code></pre></li><li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">double</span> a)</span><span class="comment">//返回小于等于参数最大的整数。</span></span><span class="function"><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="built_in">double</span> d1 = Math.floor(<span class="number">3.3</span>); <span class="comment">//d1的值为3.0</span></span><br><span class="line"><span class="built_in">double</span> d2 = Math.floor(‐<span class="number">3.3</span>); <span class="comment">//d2的值为‐4.0</span></span><br><span class="line"><span class="built_in">double</span> d3 = Math.floor(<span class="number">5.1</span>); <span class="comment">//d3的值为 5.0</span></span><br></pre></td></tr></table></figure></span></code></pre></li><li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> a)</span><span class="comment">//返回最接近参数的 long。(相当于四舍五入方法)</span></span><span class="function"><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">long</span> d1 = Math.<span class="keyword">round</span>(<span class="number">5.5</span>); <span class="comment">//d1的值为6.0</span></span><br><span class="line"><span class="keyword">long</span> d2 = Math.<span class="keyword">round</span>(<span class="number">5.4</span>); <span class="comment">//d2的值为5.0</span></span><br></pre></td></tr></table></figure></span><span class="function"></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础（二） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法</title>
      <link href="/2020/01/22/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/01/22/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在复习Java基础，刚刚好也做下笔记，本文介绍什么是Java，Java语言的开发环境，基本的数据类型有哪些，介绍了方法的概述，定义，与调用方法的三种形式，还有三种循环，数组等，再接再厉不服努力加油！！！</p>   <a id="more"></a><h2 id="1-1计算机基础知识"><a href="#1-1计算机基础知识" class="headerlink" title="1.1计算机基础知识"></a>1.1计算机基础知识</h2><p>​        <strong>字节</strong>： 字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性， 我们可以查看文件的字节大小。 </p><p> 8 bit = 1 B ，1024 B =1 KB ，1024 KB =1 MB ，1024 MB =1 GB ，1024 GB = 1 TB </p><p>​        <strong>常用DOS命令</strong>：</p><table><thead><tr><th>命令</th><th>操作符号</th></tr></thead><tbody><tr><td>盘符切换命令</td><td>D：</td></tr><tr><td>查看当前文件夹</td><td>dir</td></tr><tr><td>进入文件夹命令</td><td>cd 文件夹名</td></tr><tr><td>退出文件夹命令</td><td>cd..</td></tr><tr><td>退出磁盘根目录</td><td>cd\</td></tr><tr><td>清屏</td><td>cls</td></tr></tbody></table><h1 id="第二章Java语言开发环境"><a href="#第二章Java语言开发环境" class="headerlink" title="第二章Java语言开发环境"></a>第二章Java语言开发环境</h1><h2 id="2-1-Java虚拟机–JVM"><a href="#2-1-Java虚拟机–JVM" class="headerlink" title="2.1  Java虚拟机–JVM"></a>2.1  Java虚拟机–JVM</h2><p>​        <strong>JVM</strong>： ：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的 运行环境，是Java 最具吸引力的特性之一。我们编写的Java代码，都运行在 JVM 之上。 </p><h2 id="2-2-JRE和JDK"><a href="#2-2-JRE和JDK" class="headerlink" title="2.2 JRE和JDK"></a>2.2 JRE和JDK</h2><pre><code>**· JRE**： 是Java程序的运行时环境，包含 JVM 和运行时所需要的 核心类库 。 </code></pre><p>​    <strong>· JDK</strong>：  是Java程序开发工具包，包含 JRE 和开发人员使用的工具。 </p><p>​    三者关系： JDK&gt;JRE&gt;JVM</p><h1 id="第三章程序说明"><a href="#第三章程序说明" class="headerlink" title="第三章程序说明"></a>第三章程序说明</h1><h2 id="3-1编译和运行是两回事"><a href="#3-1编译和运行是两回事" class="headerlink" title="3.1编译和运行是两回事"></a>3.1编译和运行是两回事</h2><p>​            <strong>·  编译：</strong>是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中， javac 编译器会检查我们 所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。 </p><p>​            <strong>·运行</strong>：是指将 class文件 交给JVM去运行，此时JVM就会去执行我们编写的程序了。</p><h2 id="3-2关于main方法"><a href="#3-2关于main方法" class="headerlink" title="3.2关于main方法"></a>3.2关于main方法</h2><p>​         <strong>main方法</strong>：称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们编写多 少程序，JVM在运行的时候，都会从main方法这里开始执行。</p><h2 id="3-3关键字keywords"><a href="#3-3关键字keywords" class="headerlink" title="3.3关键字keywords"></a>3.3关键字keywords</h2><p>​         <strong>关键字</strong>：是指在程序中，Java已经定义好的单词，具有特殊含义。 HelloWorld案例中，出现的关键字有 public 、 class 、 static 、 void 等，这些单词已经被 Java定义好，全部都是小写字母，notepad++中颜色特殊。   </p><h2 id="3-4-标识符"><a href="#3-4-标识符" class="headerlink" title="3.4 标识符"></a>3.4 标识符</h2><p> <strong>标识符：</strong>是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。 </p><p> <strong>命名规则：</strong> <strong>硬性要求</strong> </p><p>标识符可以包含 英文字母26个(区分大小写) 、 0-9数字 、 $（美元符号） 和 _（下划线） 。 标识符不能以数字开头。 标识符不能是关键字 </p><p> <strong>命名规范： 软性建议</strong> </p><p>类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。 方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）。 变量名规范：全部小写。 </p><h1 id="第四章变量和数据类型"><a href="#第四章变量和数据类型" class="headerlink" title="第四章变量和数据类型"></a>第四章变量和数据类型</h1><h2 id="5-1数据类型"><a href="#5-1数据类型" class="headerlink" title="5.1数据类型"></a>5.1数据类型</h2><h3 id="Java的数据类型分为两大类"><a href="#Java的数据类型分为两大类" class="headerlink" title="Java的数据类型分为两大类"></a>Java的数据类型分为两大类</h3><p>​    <strong>基本数据类型：</strong>包括 整数、浮点数、字符、布尔。</p><p>​    <strong>引用数据类型：</strong>包括 类、数组、接口。</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="四类八种基本数据类型"><a href="#四类八种基本数据类型" class="headerlink" title="四类八种基本数据类型"></a>四类八种基本数据类型</h4><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>-128~127</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>-32768~32767</td></tr><tr><td>整型</td><td>int</td><td>4个字节</td><td>-231次方~2的31次方-1</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-2的63次方~2的63次方-1</td></tr><tr><td>单精度浮点数</td><td>folat</td><td>4个字节</td><td>1.4013E-45~3.4028E+38</td></tr><tr><td>双精度浮点数</td><td>double</td><td>8个字节</td><td>4.9E-324~1.7977E+308</td></tr><tr><td>字节型</td><td>char</td><td>2个字节</td><td>0-65535</td></tr><tr><td>布尔型</td><td>boolean</td><td>1个字节</td><td>true，false</td></tr></tbody></table><p>Java中的默认类型： 整数类型是int，浮点类型是double</p><h2 id="5-2变量的定义"><a href="#5-2变量的定义" class="headerlink" title="5.2变量的定义"></a>5.2变量的定义</h2><p> <strong>变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量。</strong> </p><p>变量定义的格式包括三个要素： 数据类型、变量名、数据值。</p><p><strong>格式</strong>： <strong>数据类型 变量名 = 数据值；</strong></p><h2 id="5-3注意事项"><a href="#5-3注意事项" class="headerlink" title="5.3注意事项"></a>5.3注意事项</h2><p><strong>变量名称：在同一个大括号范围内，变量的名字不可以相同</strong></p><p><strong>变量赋值：定义是变量，不赋值不能使用。</strong></p><h1 id="第五章-方法"><a href="#第五章-方法" class="headerlink" title="第五章 方法"></a>第五章 方法</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p> 我们在学习运算符的时候，都为每个运算符单独的创建一个新的类和main方法，我们会发现这样编写代码非常的繁琐，而且 重复的代码过多。能否避免这些重复的代码呢，就需要使用方法来实现。</p><p>​         <strong>方法：</strong>就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。 当我们需要这个功能的时候，就可以去调用。这样即实现了代码的复用性，也解决了代码冗余的现象。 </p><h2 id="5-2方法的定义"><a href="#5-2方法的定义" class="headerlink" title="5.2方法的定义"></a>5.2方法的定义</h2><p> <strong>定义格式：</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 （参数列表）｛</span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><ul><li>修饰符：public static</li><li>返回值类型：表示方法运行的结果的数据类型，方法执行后将结果返回到调用者</li><li>参数列表：方法在运行过程中未知数据，调用者调用方法时传递</li><li>return：将方法执行后的结果带给调用者，方法执行到return，整体方法运行结束</li></ul><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这是一个方法"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3方法的调用"><a href="#5-3方法的调用" class="headerlink" title="5.3方法的调用"></a>5.3方法的调用</h2><p>​     <strong>方法在定义完毕后，方法不会自己运行，必须被调用才能执行，我们可以在主方法main中来调用我们自己定义好的方法。在 主方法中，直接写要调用的方法名字就可以调用了</strong>。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用定义的方法method</span></span><br><span class="line">    method();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方法，被main方法调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"自己定义的方法，需要被main调用运行"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4调用方法的三种形式"><a href="#5-4调用方法的三种形式" class="headerlink" title="5.4调用方法的三种形式"></a>5.4调用方法的三种形式</h2><ul><li><p><strong>直接调用：</strong>直接写方法名调用</p></li><li><pre><code class="Java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{    print();}<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>{    System.out.println(<span class="string">"方法被调用"</span>);}&lt;!--￼<span class="number">3</span>--&gt;</code></pre></li><li><p><strong>输出语句调用：</strong> 在输出语句中调用方法， System.out.println(方法名()) 。 </p></li></ul><h2 id="5-5方法重载"><a href="#5-5方法重载" class="headerlink" title="5.5方法重载"></a>5.5方法重载</h2><ul><li><p><strong>方法重载：</strong> 指在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可，与修饰符和返 回值类型无关。  </p></li><li><p>参数列表：个数不同，数据类型不同，顺序不同。 </p></li><li><p>重载方法调用：JVM通过方法的参数列表，调用不同的方法。 </p></li><li><p>如：</p></li><li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>{}<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a)</span></span>{}<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a，<span class="keyword">int</span> b)</span></span>{}&lt;!--￼<span class="number">4</span>--&gt;</code></pre></li></ul><h2 id="6-2循环语句–while"><a href="#6-2循环语句–while" class="headerlink" title="6.2循环语句–while"></a>6.2循环语句–while</h2><p> <strong>while循环语句格式：</strong>  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化表达式①</span><br><span class="line"><span class="function"><span class="title">while</span><span class="params">(布尔表达式②)</span></span>&#123;</span><br><span class="line">循环体③</span><br><span class="line">步进表达式④</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3循环语句–do…while"><a href="#6-3循环语句–do…while" class="headerlink" title="6.3循环语句–do…while"></a>6.3循环语句–do…while</h2><p> <strong>do…while循环格式</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化表达式①</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环体③</span><br><span class="line">步进表达式④</span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式②);</span><br></pre></td></tr></table></figure><h2 id="6-4循环语句的区别"><a href="#6-4循环语句的区别" class="headerlink" title="6.4循环语句的区别"></a>6.4循环语句的区别</h2><p> <strong>for 和 while 的小区别：</strong> </p><p>​        控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继 续使用，如果你想继续使用，就用while，否则推荐使用for。原因是for循环结束，该变量就从内存中消 失，能够提高内存的使用效率。</p><p>​         在已知循环次数的时候使用推荐使用for，循环次数未知的时推荐使用while。 </p><h2 id="6-5跳出语句"><a href="#6-5跳出语句" class="headerlink" title="6.5跳出语句"></a>6.5跳出语句</h2><p><strong>break</strong></p><p>​    <strong>使用场景：终止switch或者循环</strong></p><p>​                 在选择结构switch语句中 </p><p>​                 在循环语句中 </p><p>​                 离开使用场景的存在是没有意义的 </p><p><strong>continue</strong></p><p>​        <strong>使用场景：结束本次循环，继续下一次的循环</strong></p><h1 id="第7章数组"><a href="#第7章数组" class="headerlink" title="第7章数组"></a>第7章数组</h1><h2 id="7-1数组定义和访问"><a href="#7-1数组定义和访问" class="headerlink" title="7.1数组定义和访问"></a>7.1数组定义和访问</h2><h3 id="7-1-1容器概述"><a href="#7-1-1容器概述" class="headerlink" title="7.1.1容器概述"></a>7.1.1容器概述</h3><p><strong>容器概念</strong>：</p><p>​        <strong>容器：</strong>是将多个数据储存到一起，每个数据称为该容器的元素。</p><h3 id="7-1-2数组的概念"><a href="#7-1-2数组的概念" class="headerlink" title="7.1.2数组的概念"></a>7.1.2数组的概念</h3><p> <strong>数组概念：</strong> 数组就是存储数据长度固定的容器，保证多个数据的数据类型要一致。</p><h3 id="7-1-3数组的定义"><a href="#7-1-3数组的定义" class="headerlink" title="7.1.3数组的定义"></a>7.1.3数组的定义</h3><p><strong>方式一</strong></p><p>​        <strong>格式：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组存储的数据类型[] 数组名字 = <span class="keyword">new</span> 数组存储的数据类型[长度];</span><br></pre></td></tr></table></figure><ul><li><strong>数组定义格式详解：</strong><ul><li>数组存储的数据类型：创建的数组可以储存什么数据类型。</li><li>[]：表示数组</li><li>数组名字：为定义的数据起一个变量名，满足标识符规范，可以使用名字操作数组</li><li>new：关键字，创建数组的关键字</li><li>数组存储的数据类型： 创建的数组容器可以存储什么数据类型。 </li><li>[长度]：数组的长度，表示数组容器中可以存储多少个元素。 </li><li><strong>注意：数组有定长特性，长度一旦指定，不可更改。</strong> </li></ul></li></ul><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p><strong>方式二</strong></p><p>​        <strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>...&#125;;</span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> intp[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>方式三</strong></p><p>​        <strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>...&#125;;</span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-1-4-数组的访问"><a href="#7-1-4-数组的访问" class="headerlink" title="7.1.4 数组的访问"></a>7.1.4 数组的访问</h3><ul><li><p><strong>索引：</strong> 每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为<strong>数组索引 (index)</strong>，可以通过数组的索引访问到数组中的元素。 </p></li><li><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引]</span><br></pre></td></tr></table></figure></li><li><p><strong>数组的长度：</strong> 每个数组都具有长度，而且是固定的，Java中赋予了数组的一个属性，可以获取到数组的 长度，语句为： <strong>数组名.length</strong> </p></li></ul><h2 id="7-2数组原理内存"><a href="#7-2数组原理内存" class="headerlink" title="7.2数组原理内存"></a>7.2数组原理内存</h2><h3 id="7-2-1内存概述"><a href="#7-2-1内存概述" class="headerlink" title="7.2.1内存概述"></a>7.2.1内存概述</h3><p>​         内存是计算机中的重要原件，临时存储区域，作用是运行程序。我们编写的程序是存放在硬盘中的，在硬盘中的程 序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。 Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。 </p><h3 id="7-2-2Java虚拟机的内存划分"><a href="#7-2-2Java虚拟机的内存划分" class="headerlink" title="7.2.2Java虚拟机的内存划分"></a>7.2.2Java虚拟机的内存划分</h3><p>​         为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。 </p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>寄存器</td><td>给CPU使用，和我们开发无关。</td></tr><tr><td>本地方法栈</td><td>JVM在使用操作系统功能的时候使用，和我们开发无关</td></tr><tr><td>方法区</td><td>存储可以运行的class文件。</td></tr><tr><td>堆内存</td><td>存储对象或者数组，new来创建的，都存储在堆内存。</td></tr><tr><td>方法栈</td><td>方法运行时使用的内存，比如main方法运行。</td></tr></tbody></table><h3 id="7-2-3数组的常见操作"><a href="#7-2-3数组的常见操作" class="headerlink" title="7.2.3数组的常见操作"></a>7.2.3数组的常见操作</h3><ul><li><strong>数据越界异常</strong></li><li><strong>数组空指针异常</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础（一） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的一年新的开始！</title>
      <link href="/2020/01/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2020/01/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新的一年就要来啦！！请你一定不要停下来成为你想成为的人。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
